@page "/Selection"
@using Newtonsoft.Json;
@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Grids

@using Syncfusion.Blazor.DropDowns
<button @onclick="AllowSelection">AllowSelection</button>
<span> AllowSelection is : @SelectionValue </span>
<button @onclick="SelectedRowIndex">SelectedRowIndex 3</button>
<span> The selected row index is : @SelectedValue </span>
<br />
<h5>Events for Row:</h5>
<span> RowSelecting event triggered : @rowSelecting , Count : @rowSelectingCount</span>
<br />
<span> RowSelected event triggered : @rowSelected , Count : @rowSelectedCount</span>
<br />
<span> RowDeselecting event triggered : @rowDeselecting , Count : @rowDeselectingCount </span>
<br />
<span> RowDeselected event triggered : @rowDeselected , Count : @rowDeselectedCount </span>
<br />
<h5>Events for Cell:</h5>
<span> CellSelecting event triggered : @cellSelecting , Count : @cellSelectingCount</span>
<br />
<span> CellSelected event triggered : @cellSelected , Count : @cellSelectedCount</span>
<br />
<span> CellDeselecting event triggered : @cellDeselecting , Count : @cellDeselectingCount </span>
<br />
<span> CellDeselected event triggered : @cellDeselected , Count : @cellDeselectedCount </span>
<br />
<h5>To restrict selection using events:</h5>
<span>Click first cell of first row to restrict the cell selection using cell selecting event</span>
<br />
<span>Click first row to restrict the row selection using row selecting event</span>
<br />

<button @onclick="SelectCell">Select Cell</button>
<button @onclick="GetSelectedRowIndexes">GetSelectedRowIndexes</button>
<button @onclick="SelectRow">Select Row</button>
<button @onclick="SelectRows">Select Rows</button>
<button @onclick="SelectRowsByRange">SelectRowsByRange</button>
<button @onclick="GetSelectedRecords">GetSelectedRecords</button>
<button @onclick="ClearSelection">ClearSelection</button>
<br />

<span>Toggle : </span>
<SfDropDownList Width="20%" @ref="@DropdownToggle" TValue="string" TItem="DropDownData" DataSource="@SelectionToggle" @bind-Value="@DefaultToggle">
    <DropDownListEvents TValue="string" ValueChange="ToggleChange"  TItem="DropDownData"></DropDownListEvents>
    <DropDownListFieldSettings Text="Mode" Value="ID"></DropDownListFieldSettings>
</SfDropDownList>
<br />

<span>Mode : </span>
<SfDropDownList Width="20%" @ref="@DropdownMode" TValue="string" TItem="DropDownData" DataSource="@SelectionModes" @bind-Value="@Mode">
    <DropDownListEvents TValue="string" ValueChange="ModeChange"  TItem="DropDownData"></DropDownListEvents>
    <DropDownListFieldSettings Text="Mode" Value="ID"></DropDownListFieldSettings>
</SfDropDownList>
<br />

<span>Type : </span>
<SfDropDownList Width="20%" @ref="@DropdownType" TValue="string" TItem="DropDownData" DataSource="@SelectionTypes" @bind-Value="@Type">
    <DropDownListEvents TValue="string" ValueChange="TypeChange"  TItem="DropDownData"></DropDownListEvents>
    <DropDownListFieldSettings Text="Mode" Value="ID"></DropDownListFieldSettings>
</SfDropDownList>
<br />

<SfGantt @ref="Gantt" DataSource="@TaskCollection" Height="450px" Width="700px" AllowSelection="@SelectionValue" SelectedRowIndex="@SelectedValue">
    <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" Child="SubTasks">
    </GanttTaskFields>
    <GanttSelectionSettings Mode="@GanttSelectMode" Type="@GanttSelectType" EnableToggle="@Toggle"></GanttSelectionSettings>
    <GanttEvents CellSelecting="CellSelecting" CellSelected="CellSelected" CellDeselecting="CellDeselecting" CellDeselected="CellDeselected"
                 RowSelecting="RowSelecting" RowSelected="RowSelected" RowDeselecting="RowDeselecting" RowDeselected="RowDeselected" TValue="TaskData"></GanttEvents>
</SfGantt>



@code{
    SfDropDownList<string, DropDownData> DropdownToggle { get; set; }
    public List<DropDownData> SelectionToggle { get; set; } = new List<DropDownData>();
    public string DefaultToggle;
    public class DropDownData
    {
        public string ID { get; set; }
        public string Mode { get; set; }
    }
    public void ToggleChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DropDownData> args)
    {
        if (args.Value == "False")
        {
            Toggle = false;
        }
        else if (args.Value == "True")
        {
            Toggle = true;
        }
    }

    SfDropDownList<string, DropDownData> DropdownMode { get; set; }
    public List<DropDownData> SelectionModes { get; set; } = new List<DropDownData>();
    public string Mode { get; set; }
    public void ModeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DropDownData> args)
    {
        if (args.Value == "Cell")
        {
            GanttSelectMode = Syncfusion.Blazor.Grids.SelectionMode.Cell;
        }
        if (args.Value == "Row")
        {
            GanttSelectMode = Syncfusion.Blazor.Grids.SelectionMode.Row;
        }
    }

    SfDropDownList<string, DropDownData> DropdownType { get; set; }
    public List<DropDownData> SelectionTypes { get; set; } = new List<DropDownData>();
    public string Type { get; set; }
    public void TypeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DropDownData> args)
    {
        if (args.Value == "Single")
        {
            GanttSelectType = Syncfusion.Blazor.Grids.SelectionType.Single;
        }
        if (args.Value == "Multiple")
        {
            GanttSelectType = Syncfusion.Blazor.Grids.SelectionType.Multiple;
        }
    }

    public SfGantt<TaskData> Gantt;
    public Syncfusion.Blazor.Grids.SelectionMode GanttSelectMode { get; set; } = Syncfusion.Blazor.Grids.SelectionMode.Row;
    public Syncfusion.Blazor.Grids.SelectionType GanttSelectType { get; set; } = Syncfusion.Blazor.Grids.SelectionType.Single;
    public Boolean SelectionValue = true;
    public Boolean Toggle = false;
    public Boolean rowSelecting;
    public Boolean rowSelected;
    public Boolean rowDeselecting;
    public Boolean rowDeselected;
    public int rowSelectingCount;
    public int rowSelectedCount;
    public int rowDeselectingCount;
    public int rowDeselectedCount;

    public Boolean cellSelecting;
    public Boolean cellSelected;
    public Boolean cellDeselecting;
    public Boolean cellDeselected;
    public int cellSelectingCount;
    public int cellSelectedCount;
    public int cellDeselectingCount;
    public int cellDeselectedCount;

    public double SelectedValue = -1;
    public List<double> SelectedRowIndexes { get; set; }
    public double[] TotalValue { get; set; }



    public void AllowSelection()
    {
        SelectionValue = SelectionValue ? false : true;
    }

    public void SelectCell()
    {
        this.Gantt.SelectCell((2, 1));
    }
    public async void CellSelecting(CellSelectingEventArgs<TaskData> args)
    {
        if (args.CellIndex == 0 && args.RowIndex == 0)
        {
            args.Cancel = true;
        }
        cellSelecting = true;
        cellSelectingCount++;
    }
    public void CellSelected(CellSelectEventArgs<TaskData> args)
    {
        cellSelected = true;
        cellSelectedCount++;
    }
    public void CellDeselecting(CellDeselectEventArgs<TaskData> args)
    {
        cellDeselecting = true;
        cellDeselectingCount++;
    }
    public void CellDeselected(CellDeselectEventArgs<TaskData> args)
    {
        cellDeselected = true;
        cellDeselectedCount++;
    }
    public async Task GetSelectedRowIndexes()
    {
        Console.WriteLine(JsonConvert.SerializeObject(this.Gantt.GetSelectedRowIndexes().Result));
    }
    public void SelectRow()
    {
        this.Gantt.SelectRow(2);
    }
    public void SelectRows()
    {
        List<double> indexes = new List<double>();
        indexes.Add(1);
        indexes.Add(2);
        this.Gantt.SelectRows(indexes.ToArray());
    }

    public void SelectRowsByRange()
    {
        this.Gantt.SelectRowsByRange(1, 3);
    }

    public void RowSelecting(RowSelectingEventArgs<TaskData> args)
    {
        if (args.RowIndex == 0)
        {
            args.Cancel = true;
        }
        rowSelecting = true;
        rowSelectingCount++;
    }
    public void RowSelected(RowSelectEventArgs<TaskData> args)
    {
        rowSelected = true;
        SelectedValue = this.Gantt.SelectedRowIndex;
        rowSelectedCount++;
    }
    public void RowDeselecting(RowDeselectEventArgs<TaskData> args)
    {
        rowDeselecting = true;
        rowDeselectingCount++;
    }
    public void RowDeselected(RowDeselectEventArgs<TaskData> args)
    {
        rowDeselected = true;
        SelectedValue = this.Gantt.SelectedRowIndex;
        rowDeselectedCount++;
    }
    public void ClearSelection()
    {
        this.Gantt.ClearSelection();
    }

    public void SelectedRowIndex()
    {
        SelectedValue = 3;
    }

    public void GetSelectedRecords()
    {
        Console.WriteLine(JsonConvert.SerializeObject(this.Gantt.GetSelectedRecords()));
    }

    public List<TaskData> TaskCollection { get; set; }
    protected override void OnInitialized()
    {
        this.TaskCollection = GetTaskCollection();
        this.SelectionToggle.Add(new DropDownData() { ID = "True", Mode = "True" });
        this.SelectionToggle.Add(new DropDownData() { ID = "False", Mode = "False" });
        this.SelectionModes.Add(new DropDownData() { ID = "Row", Mode = "Row" });
        this.SelectionModes.Add(new DropDownData() { ID = "Cell", Mode = "Cell" });
        this.SelectionTypes.Add(new DropDownData() { ID = "Single", Mode = "Single" });
        this.SelectionTypes.Add(new DropDownData() { ID = "Multiple", Mode = "Multiple" });
        this.DefaultToggle = Toggle.ToString();
        this.Mode = (this.GanttSelectMode).ToString();
        this.Type = (this.GanttSelectType).ToString();
    }

    public class TaskData
    {
        public int TaskId { get; set; }
        public string TaskName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Duration { get; set; }
        public int Progress { get; set; }
        public List<TaskData> SubTasks { get; set; }
    }

    public static List<TaskData> GetTaskCollection()
    {
        List<TaskData> Tasks = new List<TaskData>() {
        new TaskData() {
            TaskId = 1,
            TaskName = "Project initiation",
            StartDate = new DateTime(2019, 04, 02),
            EndDate = new DateTime(2019, 04, 21),
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 2,
                    TaskName = "Identify Site location",
                    StartDate = new DateTime(2019, 04, 02),
                    Duration = "0",
                    Progress = 30,
                },
                new TaskData() {
                    TaskId = 3,
                    TaskName = "Perform soil test",
                    StartDate = new DateTime(2019, 04, 02),
                    Duration = "4",
                    Progress = 40,
                },
                new TaskData() {
                    TaskId = 4,
                    TaskName = "Soil test approval",
                    StartDate = new DateTime(2019, 04, 02),
                    Duration = "0",
                    Progress = 30
                },
            })
        },
        new TaskData() {
            TaskId = 5,
            TaskName = "Project estimation",
            StartDate = new DateTime(2019, 04, 02),
            EndDate = new DateTime(2019, 04, 21),
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 6,
                    TaskName = "Develop floor plan for estimation",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "3",
                    Progress = 30,
                },
                new TaskData() {
                    TaskId = 7,
                    TaskName = "List materials",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "3",
                    Progress = 40
                },
                new TaskData() {
                    TaskId = 8,
                    TaskName = "Estimation approval",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "0",
                    Progress = 30,
                }
            })
        },
        new TaskData() {
            TaskId = 8,
            TaskName = "Project estimation",
            StartDate = new DateTime(2019, 04, 02),
            EndDate = new DateTime(2019, 04, 21),
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 10,
                    TaskName = "Develop floor plan for estimation",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "3",
                    Progress = 30,
                },
                new TaskData() {
                    TaskId = 11,
                    TaskName = "List materials",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "3",
                    Progress = 40
                },
                new TaskData() {
                    TaskId = 12,
                    TaskName = "Estimation approval",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "0",
                    Progress = 30,
                }
            })
        }
    };

        return Tasks;
    }
}

@* @using Syncfusion.Blazor.Grids
    <button @onclick="SelectedRowIndex">SelectedRowIndex 3</button>
    <button @onclick="AllowSelection">AllowSelection</button>
    <SfGrid DataSource="@Orders" AllowPaging="true" AllowSelection="@SelectionValue" SelectedRowIndex="@SelectedValue">
       <GridSelectionSettings Type="SelectionType.Single"></GridSelectionSettings>
          <GridColumns>
             <GridColumn Field=@nameof(Order.OrderID) HeaderText="Order ID" TextAlign="TextAlign.Right" Width="120"></GridColumn>
             <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" Width="150"></GridColumn>
             <GridColumn Field=@nameof(Order.OrderDate) HeaderText=" Order Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
             <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Format="C2" TextAlign="TextAlign.Right" Width="120"></GridColumn>
          </GridColumns>
    </SfGrid>

    @code{
        public List<Order> Orders { get; set; }
    public int SelectedValue = -1;
    public Boolean SelectionValue = true;
    public void SelectedRowIndex()
        {
            SelectedValue = 3;
        }
        public void AllowSelection()
        {
            SelectionValue = SelectionValue ? false : true;
        }
        protected override void OnInitialized()
        {
            Orders = Enumerable.Range(1, 75).Select(x => new Order()
            {
                OrderID = 1000 + x,
                CustomerID = (new string[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" })[new Random().Next(5)],
                Freight = 2.1 * x,
                OrderDate = DateTime.Now.AddDays(-x),
            }).ToList();
        }

        public class Order {
            public int? OrderID { get; set; }
            public string CustomerID { get; set; }
            public DateTime? OrderDate { get; set; }
            public double? Freight { get; set; }
        }
    }*@


@* @using Syncfusion.Blazor.TreeGrid;
    @using Syncfusion.Blazor.Layouts

    <button @onclick="SelectedRowIndex">SelectedRowIndex 3</button>
    <button @onclick="SelectRow">SelectRow</button>

    <SfTreeGrid ChildMapping="Children" @ref="TreeGridObject" TreeColumnIndex="1" DataSource="@TreeData" TValue="BusinessObject" SelectedRowIndex="@SelectedValue">
        <TreeGridColumns>
            <TreeGridColumn Field="TaskID" HeaderText="Task ID" Width="80" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
            <TreeGridColumn Field="TaskName" HeaderText="Task Name" Width="160"></TreeGridColumn>
            <TreeGridColumn Field="Duration" HeaderText="Duration" Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
            <TreeGridColumn Field="Progress" HeaderText="Progress" Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
            <TreeGridColumn Field="Priority" HeaderText="Priority" Width="80"></TreeGridColumn>
        </TreeGridColumns>
        <TreeGridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Both"></TreeGridSelectionSettings>
    </SfTreeGrid>

    @code{
        SfTreeGrid<BusinessObject> TreeGridObject { get; set; }
        public double SelectedValue = -1;
        public void SelectedRowIndex()
        {
            SelectedValue = 3;
        }
        public void SelectRow()
        {
            this.TreeGridObject.SelectRow(1);
        }
        public class BusinessObject
        {
            public int TaskId { get; set; }
            public string TaskName { get; set; }
            public int Duration { get; set; }
            public int Progress { get; set; }
            public string Priority { get; set; }
            public List<BusinessObject> Children { get; set; }
        }
        public List<BusinessObject> TreeData = new List<BusinessObject>();
        protected override void OnInitialized()
        {
            List<BusinessObject> Record1 = new List<BusinessObject>();
            BusinessObject Child1 = new BusinessObject() { TaskId = 2, TaskName = "Plan timeline", Progress = 100, Duration = 5, Priority = "Normal" };
            BusinessObject Child2 = new BusinessObject() { TaskId = 3, TaskName = "Plan budget", Duration = 5, Progress = 100, Priority = "Low" };
            BusinessObject Child3 = new BusinessObject() { TaskId = 4, TaskName = "Allocate resources", Duration = 5, Progress = 100, Priority = "Critical" };
            Record1.Add(Child1);
            Record1.Add(Child2);
            Record1.Add(Child3);
            TreeData.Add(new BusinessObject() { TaskId = 1, TaskName = "Planning", Duration = 10, Progress = 70, Children = Record1, Priority = "High" });


            List<BusinessObject> Record2 = new List<BusinessObject>();
            BusinessObject Child4 = new BusinessObject() { TaskId = 6, TaskName = "Software Specification", Progress = 60, Duration = 3, Priority = "Normal" };
            BusinessObject Child5 = new BusinessObject() { TaskId = 7, TaskName = "Develop Prototype", Duration = 3, Progress = 100, Priority = "Critical" };


            Record2.Add(Child4);
            Record2.Add(Child5);
            //TreeData.Add(new BusinessObject() { TaskId = 5, TaskName = "Design", Duration = 3, Progress = 86, Children = Record2, Priority = "High" });
        }
    } *@