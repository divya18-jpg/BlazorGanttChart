@page "/EventMarkerSample"
@using Syncfusion.Blazor.Gantt

<button class="btn btn-primary" @onclick="IncrementCount">dynamic event marker</button>

<button class="btn btn-primary" @onclick="SetNull">empty event marker</button>

<SfGantt DataSource="@TaskCollection" EventMarkers="@eventmarkercollection" Height="450px" Width="900px" >
    <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                     Duration="Duration" Progress="Progress" Child="SubTasks">
    </GanttTaskFields>
    <GanttEventMarkers>
        <GanttEventMarker Day="@Event1" Label="Project approval"
                          CssClass="e-custom-event-marker"></GanttEventMarker>
        <GanttEventMarker Day="@Event2" Label="kick-off"
                          CssClass="e-custom-event-marker"></GanttEventMarker>
        <GanttEventMarker Day="@Event3" Label="validation"
                          CssClass="e-custom-event-marker"></GanttEventMarker>
    </GanttEventMarkers>
</SfGantt>
@code{
    private void IncrementCount()
    {
        this.eventmarkercollection = eventmarker();

    }

    private void SetNull()
    {
        this.eventmarkercollection = null;

    }

    public List<GanttEventMarker> eventmarker()
    {
        List<GanttEventMarker> collection = new List<GanttEventMarker>();
        collection.Add(new GanttEventMarker()
        {
            Day = new DateTime(2019, 04, 9),
            CssClass= "e-custom-event-marker",
            Label = "project"


        });
        collection.Add(new GanttEventMarker()
        {
            Day = new DateTime(2019, 04, 13),
            CssClass= "e-custom-event-marker",
            Label = "kick off"



        });

        return collection;
    }

    public List<GanttEventMarker> eventmarkercollection { get; set; }
    public DateTime Event1 = new DateTime(2019, 04, 20);
    public DateTime Event2 = new DateTime(2019, 04, 13);
    public DateTime Event3 = new DateTime(2019, 04, 07);


    public List<TaskData> TaskCollection { get; set; }
    protected override void OnInitialized()
    {
        this.TaskCollection = GetTaskCollection();
    }

    public class TaskData
    {
        public int TaskId { get; set; }
        public string TaskName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Duration { get; set; }
        public int Progress { get; set; }
        public List<TaskData> SubTasks { get; set; }
    }

    public static List<TaskData> GetTaskCollection()
    {
        List<TaskData> Tasks = new List<TaskData>() {
        new TaskData() {
            TaskId = 1,
            TaskName = "Project initiation",
            StartDate = new DateTime(2019, 04, 02),
            EndDate = new DateTime(2019, 04, 21),
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 2,
                    TaskName = "Identify Site location",
                    StartDate = new DateTime(2019, 04, 02),
                    Duration = "0",
                    Progress = 30,
                },
                new TaskData() {
                    TaskId = 3,
                    TaskName = "Perform soil test",
                    StartDate = new DateTime(2019, 04, 02),
                    Duration = "4",
                    Progress = 40,
                },
                new TaskData() {
                    TaskId = 4,
                    TaskName = "Soil test approval",
                    StartDate = new DateTime(2019, 04, 02),
                    Duration = "0",
                    Progress = 30,
                },
            })
        },
        new TaskData() {
            TaskId = 5,
            TaskName = "Project estimation",
            StartDate = new DateTime(2019, 04, 02),
            EndDate = new DateTime(2019, 04, 21),
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 6,
                    TaskName = "Develop floor plan for estimation",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "3",
                    Progress = 30,
                },
                new TaskData() {
                    TaskId = 7,
                    TaskName = "List materials",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "3",
                    Progress = 40,
                },
                new TaskData() {
                    TaskId = 8,
                    TaskName = "Estimation approval",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "0",
                    Progress = 30
                }
            })
        }
    };
        return Tasks;
    }
}
