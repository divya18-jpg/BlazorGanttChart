@page "/customContextMenu"
@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Grids
<SfGantt @ref="sfGantt" DataSource="@TaskCollection" Height="450px" Width="700px" ContextMenuItems="@(new List<object>() { new ContextMenuItemModel{Text = "Copy with headers", Target = ".e-content", Id = "copywithheader" }})">
    <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
    </GanttTaskFields>
    <GanttEvents ContextMenuItemClicked="OnContextMenuClick" ContextMenuOpen="ContextMenuOpenHandler" TValue="TaskData"></GanttEvents>
</SfGantt>

@code{
    private SfGantt<TaskData> sfGantt;
    public List<TaskData> TaskCollection { get; set; }
    private List<string> HiddenItems = new List<string>();
    protected override void OnInitialized()
    {
        this.TaskCollection = GetTaskCollection();
    }
    public void OnContextMenuClick(ContextMenuClickEventArgs<TaskData> args)
    {
        if (args.Item.Id == "copywithheader")
        {

        }
    }
    public void ContextMenuOpenHandler(ContextMenuOpenEventArgs<TaskData> args)
    {
        for (int i = 0; i < args.Items.Count(); i++)
        {
            var item = args.Items.ToList()[i];
            if (String.Equals(item.Text, "Copy with headers"))
            {
                this.HiddenItems.Add(item.Text);

            }
        }
        args.ContextMenuObj.HideItems(this.HiddenItems);

    }
    public class TaskData
    {
        public int TaskId { get; set; }
        public string TaskName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Duration { get; set; }
        public int Progress { get; set; }
        public int? ParentId { get; set; }
    }

    public static List<TaskData> GetTaskCollection()
    {
        List<TaskData> Tasks = new List<TaskData>() {

        new TaskData() {
            TaskId = 1,
            TaskName = "Project initiation",
            StartDate = new DateTime(2019, 04, 02),
            EndDate = new DateTime(2019, 04, 21)
        },
        new TaskData() {
            TaskId = 2,
            TaskName = "Identify Site location",
            StartDate = new DateTime(2019, 04, 02),
            Duration = "0",
            Progress = 30,
            ParentId = 1
        },
        new TaskData() {
            TaskId = 3,
            TaskName = "Perform soil test",
            StartDate = new DateTime(2019, 04, 02),
            Duration = "4",
            Progress = 40,
            ParentId = 1
        },
        new TaskData() {
            TaskId = 4,
            TaskName = "Soil test approval",
            StartDate = new DateTime(2019, 04, 02),
            Duration = "0",
            Progress = 30,
            ParentId = 1
        },
        new TaskData() {
            TaskId = 5,
            TaskName = "Project estimation",
            StartDate = new DateTime(2019, 04, 02),
            EndDate = new DateTime(2019, 04, 21)
        },
        new TaskData() {
            TaskId = 6,
            TaskName = "Develop floor plan for estimation",
            StartDate = new DateTime(2019, 04, 04),
            Duration = "3",
            Progress = 30,
            ParentId = 5
        },
        new TaskData() {
            TaskId = 7,
            TaskName = "List materials",
            StartDate = new DateTime(2019, 04, 04),
            Duration = "3",
            Progress = 40,
            ParentId = 5
        },
        new TaskData() {
            TaskId = 8,
            TaskName = "Estimation approval",
            StartDate = new DateTime(2019, 04, 04),
            Duration = "0",
            Progress = 30,
            ParentId = 5
        }
    };
        return Tasks;
    }
}